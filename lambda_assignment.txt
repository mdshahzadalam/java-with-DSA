1. What is the lamba expression of java 8?
Ans.  As its name suggests its an expression which allows you to write more succinct code in java 8. For example (a, b) ->a+b is a lambda expression(look for that arrow ->)

Which is equal to following code:
public int value (int a , int b){
 return a+b;
}

Its also called an anonymous function because you are essentially writing the code you write in function but without name.

2.  Can you pass lambda expressions to a method?When?
Ans.  Yes you can pass a lambda expression to a method provided it is expecting a functional interface. For example if a method is accepting a Runnable Comparable or Comparator then you can pass a lambda expression to it because all these are functional interface in java8.

3.   What  is the functional interface in java 8?
Ans. The main benefit of lambda expression in java 8 is an interface with a single abstract method. For example Comparator which has just one abstract method called compare() or Runnable which just abstract method callled run(). There are many more general purpose functional interfaces introdued in JDK on java.util.functinal.package. They are also annotated with @FunctionalInterface but thats optaional.

4.  What is the benefits of lambda expressions in java 8?
Ans.  The main benefits of lambda expression in java 8 is that now its wasier to pass a code block to a method . Earlier the only way to do this was wrapping the code inside an Anonymous class requires a lot od boilerplate code.

5.    Is it mandatory for a lambda to have parameters?
Ans.   No its not mandatory for a lambda expression to have parametrs you can define a lambda expression without parameters as shown below:
()-> System.out.println("lambda without parameter");
You can pass this code to any method which accepts a functional interface.